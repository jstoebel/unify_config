Model.new(:unify, 'Backup for Unify Water site') do

  archive :unify do |archive|
    # Run the `tar` command using `sudo`
    archive.use_sudo
    archive.add "{{wp.root_dir}}"  # wordpress
    archive.add "{{hi.root_dir}}"  # rails app

    # archive.exclude "/path/to/a/excluded_file.rb"
  end

  ##
  # MySQL [Database]
  #
  database MySQL, :wordpress do |db|
    # To dump all databases, set `db.name = :all` (or leave blank)
    db.name               = "{{wp.db}}"
    db.username           = "{{wp.user}}"
    db.password           = "{{wp.pw}}"
    db.host               = "localhost"
    db.port               = 3306
    db.socket             = "/var/run/mysqld/mysqld.sock"
  end

  database MySQL, :rails do |db|
    db.name               = "{{hi.db}}"
    db.username           = "{{hi.user}}"
    db.password           = "{{hi.pw}}"
    db.host               = "localhost"
    db.port               = 3306
    db.socket             = "/var/run/mysqld/mysqld.sock"
  end

  ##
  # Dropbox [Storage]
  #
  # Your initial backup must be performed manually to authorize
  # this machine with your Dropbox account. This authorized session
  # will be stored in `cache_path` and used for subsequent backups.
  #
  store_with Dropbox do |db|
    db.api_key     = "{{ dropbox.api_key }}"
    db.api_secret  = "{{ dropbox.api_secret }}"
    # Sets the path where the cached authorized session will be stored.
    # Relative paths will be relative to ~/Backup, unless the --root-path
    # is set on the command line or within your configuration file.
    db.cache_path  = ".cache"
    # :app_folder (default) or :dropbox
    db.access_type = :app_folder
    db.path        = "~/backups"
    db.keep        = 25
    # db.keep        = Time.now - 2592000 # Remove all backups older than 1 month.
  end

  ##
  # Local (Copy) [Storage]
  #
  store_with Local do |local|
    local.path       = "~/backups/"
    local.keep       = 5
    # local.keep       = Time.now - 2592000 # Remove all backups older than 1 month.
  end

  ##
  # Gzip [Compressor]
  #
  compress_with Gzip

  notify_by Slack do |slack|
    slack.on_success = true
    slack.on_warning = true
    slack.on_failure = true

    # The integration token
    slack.webhook_url = "{{slack.webhook}}"

    # The channel to which messages will be sent
    # slack.channel = 'my_channel'
    #
    # The username to display along with the notification
    # slack.username = 'my_username'
    #
    # The emoji icon to use for notifications.
    # See http://www.emoji-cheat-sheet.com for a list of icons.
    slack.icon_emoji = ':droplet:'
    #
    # Change default notifier message.
    # See https://github.com/backup/backup/pull/698 for more information.
    # slack.message = lambda do |model, data|
    #   "[#{data[:status][:message]}] #{model.label} (#{model.trigger})"
    # end
  end



end
